{
    "docs": [
        {
            "location": "/", 
            "text": "France-IOI projects overview\n\n\nThis repository contains both a general presentation of all projects, and some documentation related to multiple projects.\n\n\n\n\nGeneral presentation\n\n\nBadges system", 
            "title": "Home"
        }, 
        {
            "location": "/#france-ioi-projects-overview", 
            "text": "This repository contains both a general presentation of all projects, and some documentation related to multiple projects.   General presentation  Badges system", 
            "title": "France-IOI projects overview"
        }, 
        {
            "location": "/readme/", 
            "text": "projects-overview\n\n\nThis document lists all the public repositories of the \nfrance-ioi\n organization.\n\n\nAll of our tools are under MIT License, even when the License is not specified in the repository.\n\n\nAll of our tasks published in these repositories are under (CC-BY-SA)[https://creativecommons.org/licenses/by-sa/2.0/?] license.\n\n\nThis repository also hosts some \ndocumentation common to projects\n on GitHub pages.\n\n\nPresentation websites\n\n\nThese are just basic presentation websites for contests organized by France-ioi\n\n\n\n\nalkindi-site\n corresponds to http://concours-alkindi.fr\n\n\nCastor-informatique.fr\n corresponds to http://castor-informatique.fr\n\n\n\n\nLogin module\n\n\n\n\nlogin-module\n\nThis module takes care of the authentication of users into our different platforms. Different authentication methods are supported: plain login/password, google, facebook, authentication through LTI, SAML (in progress), and some custom authentication from other platforms such as PMS.\n\n\nlti-to-bebras\n\nThis module is used here as a way to authenticate to the login-module through the LTI standard. It is also used to directly integrate tasks into platforms that support LTI (see below).\n\n\n\n\nAlgorea learning platform\n\n\n\n\nAlgoreaPlatform\n\nThis is the main repository for our new exercise platform. The goal is for this platform to eventually replace our other platforms, once all the required features are in place. A beta version can be tested on http://parcours.algorea.org\nIt uses:\n\n\ncommonFramework\n at its heart for client/server synchronization\n\n\nlogin-module\n for authentication\n\n\npem-platform\n to integrate tasks through the task API\n\n\n\n\nBebras contest platform\n\n\n\n\nbebras-platform\n\nThis platform is specialized in organizing large scale contests that make use of client-side only interactive tasks. It uses tasks that implement the task integration API as well as the installation API.\nIt uses:\n\n\ncommonFramework\n for client/server synchronization\n\n\n...\n\n\n\n\nProduction versions of the contest side of this platform are available here (among other places):\n * \nconcours.castor-informatique.fr\n\n * \nepreuve.concours-alkindi.fr\n\n\nAlkindi contest platform\n\n\nThis platform is used to run the rounds 2 and up of the Alkindi cryptography contest. Students that are qualified can log in, create or join teams, access to the current round of tasks and collaborate to solve them.\n\n \nalkindi-frontend\n\n\n \nalkindi-backend\n\n\nAlkindi tasks\n\n\nTasks for the Alkindi platform are developed separately, but do not use the task API yet. They can mostly be tested independently of the platform, but are not yet ready to be integrated in other platforms.\n\n \nalkindi-task-lib\n\n\n \nalkindi-task-adfgx\n\n\n \nalkindi-task-playfair\n\n\n \nalkindi-task-example\n\n\nCodecast learning tool\n\n\nThe codecast project is a C language interpreter and debugger that runs in the browser, except for the parsing stage which is done on the server using clang. The tool is designed as an educational tool. Teachers can record a session where they speak while using the tool to demonstrate the execution of C code to teach a new concept. The recording can then be played by students that can interrupt it at any time to take over and play with the debugger.\nIt can be tested on \ncodecast.france-ioi.org\n, try the examples in the top-right corner.\n\n \ncodecast\n: recording/replaying events and voice\n\n \npersistent-c\n: C interpreter in the browser\n* \nc-to-json\n: uses clang to parse C and send a json AST to the client\n\n\nMonitoring tools\n\n\n\n\nbebras-monitor\n\nThis tool is used to monitor connexions to a platform, show statistics about the different ips that connect to it, and give the possibility to whitelist or blacklist some ips. This helps to protect against some types of DDOS attacks.\n\n\nbebras-guard\n\n\n\n\nTask integration API\n\n\nThis API\u2019s purpose is to make it easy to integrate a given task in different platforms, and for platforms to use tasks from all types of sources. The API is \ndocumented here\n\n\n \npem-task\n\nScripts that are part of the task-side of the task integration API.\n\n \npem-platform\n\nScripts that are part of the platform-side of the task integration API\n\n \npem-task-validator\n\nA tool to validate that tasks and platforms conform to the Task integration API.\nIt also provides a way to check that grading works as expected.\n\n \nfioi-task-importer\n\nA tool to import tasks from svn (\ndocumentation here\n):\n    * For server evaluated tasks, import their content into a mysql database of tasks, to be used by TaskPlatform\n    * For pure client tasks (bebras-based) or presentation, simply place the files on a server. (This is temporary)\n* \nlti-to-bebras\n\nWrapper to present tasks that conform to our Integration API, as LTI-compliant tasks. (also used with login-module to authenticate users through LTI)\n\n\n\n\npem-task-compiler\n\nTODO: still used somewhere?\n\n\npem-installation-api\n\nEmpty\n\n\ntmp-fioi-task-demo\n\nTODO\n\n\nfioi-tasks-template\n\nTODO\n\n\n\n\nServer-evaluated programming tasks\n\n\nThis set of tools is used to offer programming tasks, where the solutions of the students are sent to servers to be graded.\n\n \nTaskPlatform\n\nThis is the main interface that hosts programming tasks, and is the user-facing entry points of programming tasks.\n\n \nfioi-editor2\n\nThis is the ace-based multi-file editor used by TaskPlatform to let the user edit different solutions in different languages, as well as different test cases. Also integrates a Blockly editor.\n\n \nsubmission-manager\n\nThis is an interface that presents the results of the grading of a submission. It is intended to be integrated in the TaskPlatform interface, or any similar interface.\n\n \ngraderqueue\n\nSubmissions from students are sent to this queue, and different servers connect to that queue to obtain their next submission to grade. The repository also includes graderserver, which fetches tasks from this queue and sends them for evaluation to taskgrader.\n\n \ntaskgrader\n\nThis is the tool that actually grades a submission, running it within a sandbox (isolate), on a list of specified test cases, etc. The repository includes lots of tools to create, test and submit tasks (\ndocumentation here\n).\n\n \nJvs2Java\n\nThis is a simple script that converts programs written in the JavaScool language (a simplified version of Java), into pure Java, so that they can be graded\n\n\n\n\nfioi-editor\n\nTODO. Previous version of fioi-editor2 ? Deprecated ?\n\n\n\n\nBebras tasks\n\n\n\n\nbebras-tasks\n\nThis repository contains all past tasks from our Castor Informatique contest. These can be developped and tested outside of any platform.\nIt uses:\n\n\nbebras-modules\n \n\n\n\n\nThese tasks can be tested as part of our contest archive on \nconcours.castor-informatique.fr\n, or directly on \ncastor-informatique.fr/questions\n.\n\n\nTasks libraries\n\n\n\n\nbebras-modules\n\nThis repository contains all types of libraries that are used to create various interactive tasks. Each library should probably have its own repository, but we want non-developers to be able to install everything just with an svn checkout of a private repository where we work on future contest tasks.\n\n\nfioi-blockly\n\nModifications to Blockly, overriding and adding some blocks to Blockly; meant to be included after Blockly. Modifications include:\n\n\nSupport of dictionaries\n\n\nSupport of std input / output functions\n\n\nOther: TODO Michel\n\n\ndrag-and-drop-js\n\nThis library is used to create tasks that make heavy use of drag \n drop within various containers.\n\n\nbebras-math-template\n\nTODO. This is an example of task that uses MathJax\n\n\n\n\nTask editor\n\n\n\n\ntask-editor\n\nThis repository contains an editor that takes a json schema and some templates, and provides a visual interface to edit a task based on these.\n\n\n\n\nBebras review\n\n\n\n\nbebras-review\n\nThis tool is intended to help members of the Bebras community to review tasks that are created by many countries each year, and help them select a subset of tasks for their contest.\n\n\n\n\nSynchronization framework\n\n\n\n\ncommonFramework\n\nThis repository contains a few tools that are shared by several platforms. The main one is the synchronization framework, which takes care of synchronizing a subset of a mysql database with as small client-side database.\n\n\n\n\nForks of external tools\n\n\n\n\noauth2-basicauth\n\nUsed by the login-module. TODO: why forked?\n\n\ndbv\n\nUsed to maintain the schema migrations of the database of different projects.\n\n\nlti\n\nLibraries to manipulate the LTI standard, used to integrate our tasks into platforms that support LTI, and to use LTI platforms as an authentication method for the login-module\n\n\njschannel\n\nUsed to communicate between tasks and platforms. We need to make sure we have a version that never changes, so that the API can be based on that specific version.", 
            "title": "Presentation"
        }, 
        {
            "location": "/readme/#projects-overview", 
            "text": "This document lists all the public repositories of the  france-ioi  organization.  All of our tools are under MIT License, even when the License is not specified in the repository.  All of our tasks published in these repositories are under (CC-BY-SA)[https://creativecommons.org/licenses/by-sa/2.0/?] license.  This repository also hosts some  documentation common to projects  on GitHub pages.", 
            "title": "projects-overview"
        }, 
        {
            "location": "/readme/#presentation-websites", 
            "text": "These are just basic presentation websites for contests organized by France-ioi   alkindi-site  corresponds to http://concours-alkindi.fr  Castor-informatique.fr  corresponds to http://castor-informatique.fr", 
            "title": "Presentation websites"
        }, 
        {
            "location": "/readme/#login-module", 
            "text": "login-module \nThis module takes care of the authentication of users into our different platforms. Different authentication methods are supported: plain login/password, google, facebook, authentication through LTI, SAML (in progress), and some custom authentication from other platforms such as PMS.  lti-to-bebras \nThis module is used here as a way to authenticate to the login-module through the LTI standard. It is also used to directly integrate tasks into platforms that support LTI (see below).", 
            "title": "Login module"
        }, 
        {
            "location": "/readme/#algorea-learning-platform", 
            "text": "AlgoreaPlatform \nThis is the main repository for our new exercise platform. The goal is for this platform to eventually replace our other platforms, once all the required features are in place. A beta version can be tested on http://parcours.algorea.org\nIt uses:  commonFramework  at its heart for client/server synchronization  login-module  for authentication  pem-platform  to integrate tasks through the task API", 
            "title": "Algorea learning platform"
        }, 
        {
            "location": "/readme/#bebras-contest-platform", 
            "text": "bebras-platform \nThis platform is specialized in organizing large scale contests that make use of client-side only interactive tasks. It uses tasks that implement the task integration API as well as the installation API.\nIt uses:  commonFramework  for client/server synchronization  ...   Production versions of the contest side of this platform are available here (among other places):\n *  concours.castor-informatique.fr \n *  epreuve.concours-alkindi.fr", 
            "title": "Bebras contest platform"
        }, 
        {
            "location": "/readme/#alkindi-contest-platform", 
            "text": "This platform is used to run the rounds 2 and up of the Alkindi cryptography contest. Students that are qualified can log in, create or join teams, access to the current round of tasks and collaborate to solve them.   alkindi-frontend    alkindi-backend", 
            "title": "Alkindi contest platform"
        }, 
        {
            "location": "/readme/#alkindi-tasks", 
            "text": "Tasks for the Alkindi platform are developed separately, but do not use the task API yet. They can mostly be tested independently of the platform, but are not yet ready to be integrated in other platforms.   alkindi-task-lib    alkindi-task-adfgx    alkindi-task-playfair    alkindi-task-example", 
            "title": "Alkindi tasks"
        }, 
        {
            "location": "/readme/#codecast-learning-tool", 
            "text": "The codecast project is a C language interpreter and debugger that runs in the browser, except for the parsing stage which is done on the server using clang. The tool is designed as an educational tool. Teachers can record a session where they speak while using the tool to demonstrate the execution of C code to teach a new concept. The recording can then be played by students that can interrupt it at any time to take over and play with the debugger.\nIt can be tested on  codecast.france-ioi.org , try the examples in the top-right corner.   codecast : recording/replaying events and voice   persistent-c : C interpreter in the browser\n*  c-to-json : uses clang to parse C and send a json AST to the client", 
            "title": "Codecast learning tool"
        }, 
        {
            "location": "/readme/#monitoring-tools", 
            "text": "bebras-monitor \nThis tool is used to monitor connexions to a platform, show statistics about the different ips that connect to it, and give the possibility to whitelist or blacklist some ips. This helps to protect against some types of DDOS attacks.  bebras-guard", 
            "title": "Monitoring tools"
        }, 
        {
            "location": "/readme/#task-integration-api", 
            "text": "This API\u2019s purpose is to make it easy to integrate a given task in different platforms, and for platforms to use tasks from all types of sources. The API is  documented here    pem-task \nScripts that are part of the task-side of the task integration API.   pem-platform \nScripts that are part of the platform-side of the task integration API   pem-task-validator \nA tool to validate that tasks and platforms conform to the Task integration API.\nIt also provides a way to check that grading works as expected.   fioi-task-importer \nA tool to import tasks from svn ( documentation here ):\n    * For server evaluated tasks, import their content into a mysql database of tasks, to be used by TaskPlatform\n    * For pure client tasks (bebras-based) or presentation, simply place the files on a server. (This is temporary)\n*  lti-to-bebras \nWrapper to present tasks that conform to our Integration API, as LTI-compliant tasks. (also used with login-module to authenticate users through LTI)   pem-task-compiler \nTODO: still used somewhere?  pem-installation-api \nEmpty  tmp-fioi-task-demo \nTODO  fioi-tasks-template \nTODO", 
            "title": "Task integration API"
        }, 
        {
            "location": "/readme/#server-evaluated-programming-tasks", 
            "text": "This set of tools is used to offer programming tasks, where the solutions of the students are sent to servers to be graded.   TaskPlatform \nThis is the main interface that hosts programming tasks, and is the user-facing entry points of programming tasks.   fioi-editor2 \nThis is the ace-based multi-file editor used by TaskPlatform to let the user edit different solutions in different languages, as well as different test cases. Also integrates a Blockly editor.   submission-manager \nThis is an interface that presents the results of the grading of a submission. It is intended to be integrated in the TaskPlatform interface, or any similar interface.   graderqueue \nSubmissions from students are sent to this queue, and different servers connect to that queue to obtain their next submission to grade. The repository also includes graderserver, which fetches tasks from this queue and sends them for evaluation to taskgrader.   taskgrader \nThis is the tool that actually grades a submission, running it within a sandbox (isolate), on a list of specified test cases, etc. The repository includes lots of tools to create, test and submit tasks ( documentation here ).   Jvs2Java \nThis is a simple script that converts programs written in the JavaScool language (a simplified version of Java), into pure Java, so that they can be graded   fioi-editor \nTODO. Previous version of fioi-editor2 ? Deprecated ?", 
            "title": "Server-evaluated programming tasks"
        }, 
        {
            "location": "/readme/#bebras-tasks", 
            "text": "bebras-tasks \nThis repository contains all past tasks from our Castor Informatique contest. These can be developped and tested outside of any platform.\nIt uses:  bebras-modules     These tasks can be tested as part of our contest archive on  concours.castor-informatique.fr , or directly on  castor-informatique.fr/questions .", 
            "title": "Bebras tasks"
        }, 
        {
            "location": "/readme/#tasks-libraries", 
            "text": "bebras-modules \nThis repository contains all types of libraries that are used to create various interactive tasks. Each library should probably have its own repository, but we want non-developers to be able to install everything just with an svn checkout of a private repository where we work on future contest tasks.  fioi-blockly \nModifications to Blockly, overriding and adding some blocks to Blockly; meant to be included after Blockly. Modifications include:  Support of dictionaries  Support of std input / output functions  Other: TODO Michel  drag-and-drop-js \nThis library is used to create tasks that make heavy use of drag   drop within various containers.  bebras-math-template \nTODO. This is an example of task that uses MathJax", 
            "title": "Tasks libraries"
        }, 
        {
            "location": "/readme/#task-editor", 
            "text": "task-editor \nThis repository contains an editor that takes a json schema and some templates, and provides a visual interface to edit a task based on these.", 
            "title": "Task editor"
        }, 
        {
            "location": "/readme/#bebras-review", 
            "text": "bebras-review \nThis tool is intended to help members of the Bebras community to review tasks that are created by many countries each year, and help them select a subset of tasks for their contest.", 
            "title": "Bebras review"
        }, 
        {
            "location": "/readme/#synchronization-framework", 
            "text": "commonFramework \nThis repository contains a few tools that are shared by several platforms. The main one is the synchronization framework, which takes care of synchronizing a subset of a mysql database with as small client-side database.", 
            "title": "Synchronization framework"
        }, 
        {
            "location": "/readme/#forks-of-external-tools", 
            "text": "oauth2-basicauth \nUsed by the login-module. TODO: why forked?  dbv \nUsed to maintain the schema migrations of the database of different projects.  lti \nLibraries to manipulate the LTI standard, used to integrate our tasks into platforms that support LTI, and to use LTI platforms as an authentication method for the login-module  jschannel \nUsed to communicate between tasks and platforms. We need to make sure we have a version that never changes, so that the API can be based on that specific version.", 
            "title": "Forks of external tools"
        }, 
        {
            "location": "/badges/", 
            "text": "Badges system\n\n\nBadges are tokens which can represent various informations, such as access to a contest, belonging to a group, or completion of challenges, for instance.\n\n\nThey are attached to users, and some of them can even allow authentication of users from one platform to another.\n\n\nBadge verification\n\n\nA badge can be an URL to a verification service, along with a code.\n\n\nFor instance, the \nlogin-module\n can be required to ask users who log in for a badge they acquired when participating in a contest on \nbebras-platform\n. The badge URL will then be \nhttps://badges.example.com/path/to/badge\n, where \npath/to/badge\n is the target badge we are requesting.\n\n\nUsers will be prompted for a code; they can either input a code, which will be checked against the badge verification service, or say they don't have the code. If they input a valid code, the login-module will then store the badge for this user. From then on, this badge will be presented to the login request origin upon each successful login. It can be used for instance in \nAlgoreaPlatform\n to allow access to some content only to users with a certain badge.\n\n\nThe verification is done by a POST request to the badge URL. When the user inputs a code, the login-module will send a POST request to the badge URL, with the parameters \naction='verifyCode'\n and the user \ncode='abcdef'\n. If the code is valid, bebras-platform will then answer with some information about the user who acquired the badge in JSON format:\n\n\n{\n    \nsFirstName\n: \nExample\n,\n    \nsLastName\n: \nName\n,\n    \nsSex\n: \nMale\n,\n    \nsEmail\n: \nname@example.com\n,\n    \nsZipcode\n: \n12345\n,\n    \nfranceioiID\n: \n678\n\n}\n\n\n\n\nThe fields \nsFirstName\n, \nsLastName\n, \nsSex\n, \nsEmail\n, \nsZipcode\n are generic fields, but the answer can also contain fields specific to the badge, such as \nfranceioiID\n in the example above.\n\n\nIf the code is invalid, the answer will be null.", 
            "title": "Badges system"
        }, 
        {
            "location": "/badges/#badges-system", 
            "text": "Badges are tokens which can represent various informations, such as access to a contest, belonging to a group, or completion of challenges, for instance.  They are attached to users, and some of them can even allow authentication of users from one platform to another.", 
            "title": "Badges system"
        }, 
        {
            "location": "/badges/#badge-verification", 
            "text": "A badge can be an URL to a verification service, along with a code.  For instance, the  login-module  can be required to ask users who log in for a badge they acquired when participating in a contest on  bebras-platform . The badge URL will then be  https://badges.example.com/path/to/badge , where  path/to/badge  is the target badge we are requesting.  Users will be prompted for a code; they can either input a code, which will be checked against the badge verification service, or say they don't have the code. If they input a valid code, the login-module will then store the badge for this user. From then on, this badge will be presented to the login request origin upon each successful login. It can be used for instance in  AlgoreaPlatform  to allow access to some content only to users with a certain badge.  The verification is done by a POST request to the badge URL. When the user inputs a code, the login-module will send a POST request to the badge URL, with the parameters  action='verifyCode'  and the user  code='abcdef' . If the code is valid, bebras-platform will then answer with some information about the user who acquired the badge in JSON format:  {\n     sFirstName :  Example ,\n     sLastName :  Name ,\n     sSex :  Male ,\n     sEmail :  name@example.com ,\n     sZipcode :  12345 ,\n     franceioiID :  678 \n}  The fields  sFirstName ,  sLastName ,  sSex ,  sEmail ,  sZipcode  are generic fields, but the answer can also contain fields specific to the badge, such as  franceioiID  in the example above.  If the code is invalid, the answer will be null.", 
            "title": "Badge verification"
        }
    ]
}